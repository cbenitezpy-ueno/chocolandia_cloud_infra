# Beer Awards Infrastructure Module - ULTRA SIMPLE DEV
# Single AZ + Local PostgreSQL + No ALB = Maximum cost savings
# Estimated cost: ~$8-12/month (~$5-8 with free tier)

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

locals {
  common_tags = merge(var.tags, {
    Application = "beer-awards"
    Environment = var.environment
    ManagedBy   = "terraform"
    Module      = "beer-awards-ultra-simple"
    CostProfile = "ultra-low-cost"
    Architecture = "single-az-local-db"
  })
  
  name_prefix = "${var.project_name}-${var.environment}"
  
  # Single AZ only - no ALB needed
  availability_zone = data.aws_availability_zones.available.names[0]
}

# Data sources
data "aws_availability_zones" "available" {
  state = "available"
}

data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# VPC - SINGLE AZ
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-vpc"
  })
}

# Internet Gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-igw"
  })
}

# Public Subnet - SINGLE AZ (EC2 with public IP)
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidr
  availability_zone       = local.availability_zone
  map_public_ip_on_launch = true

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-public-subnet"
    Type = "Public"
  })
}

# No NAT Gateway needed - EC2 in public subnet with direct internet access

# Route Table - Public only
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-public-rt"
  })
}

# Route Table Association
resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

# Security Group for EC2 - Direct Access
resource "aws_security_group" "ec2" {
  name_prefix = "${local.name_prefix}-ec2-"
  vpc_id      = aws_vpc.main.id

  # HTTP direct access
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = var.allowed_cidr_blocks
  }

  # HTTPS direct access (optional)
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = var.allowed_cidr_blocks
  }

  # Backend application port direct access
  ingress {
    from_port   = var.backend_port
    to_port     = var.backend_port
    protocol    = "tcp"
    cidr_blocks = var.allowed_cidr_blocks
  }

  # SSH access
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = var.ssh_cidr_blocks
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-ec2-sg"
  })
}

# EC2 Instance with Local PostgreSQL
module "ec2_with_postgres" {
  source = "./ec2-with-postgres"

  name_prefix         = local.name_prefix
  subnet_id          = aws_subnet.public.id
  security_group_id  = aws_security_group.ec2.id
  
  instance_type      = var.backend_instance_type
  key_name          = var.ec2_key_pair_name
  
  # Application config
  backend_port       = var.backend_port
  jwt_secret        = var.jwt_secret
  frontend_url      = var.frontend_url
  
  # Database config (local PostgreSQL)
  db_name           = var.db_name
  db_username       = var.db_username
  db_password       = var.db_password
  
  # New Relic (optional)
  new_relic_license_key = var.new_relic_license_key
  new_relic_app_name   = var.new_relic_app_name
  
  tags = local.common_tags
}

# No ALB needed - EC2 receives traffic directly

# S3 Static Website for Frontend
module "frontend_s3" {
  source = "./frontend-s3-simple"

  name_prefix   = local.name_prefix
  bucket_name   = "${local.name_prefix}-frontend-${random_id.bucket_suffix.hex}"
  backend_url   = "http://${module.ec2_with_postgres.public_ip}:${var.backend_port}"
  
  tags = local.common_tags
}

# Random ID for bucket naming
resource "random_id" "bucket_suffix" {
  byte_length = 4
}